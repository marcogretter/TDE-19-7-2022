#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct ELs {
    char info[20];
    struct ELs * prox;
} ElemListaStringhe;

typedef ElemListaStringhe * ListaStringhe;

typedef struct ELc {
    char c;
    int n;
    struct ELc * prox;
} ElemListaCaratteri;

typedef ElemListaCaratteri * ListaCaratteri;


ListaStringhe InsInFondoStringa(ListaStringhe lista,char elem[] );
void VisualizzaListaStringhe(ListaStringhe lista );
void VisualizzaListaCaratteri(ListaCaratteri lista );
ListaStringhe costruisci();
//
// TODO: PROTOTIPI DELLE FUNZIONI RICHIESTE
//
int QuanteVolteLetteraInUnaParola(char lettera,char parola[],int lungParola);
int controlloPresenzaLettera(ListaStringhe lis,char lettera);
ListaCaratteri InsInFondo( ListaCaratteri lista,char elem,int num );
ListaCaratteri lisFinale(ListaCaratteri lisChar,ListaStringhe lisStr);

int main(){
    ListaStringhe lis;
    ListaCaratteri ris=NULL;
    lis=costruisci();
    VisualizzaListaStringhe(lis);
    //TODO: invocazione funzione
    ris=lisFinale(ris, lis);
    printf("Lista risultato\n");
    VisualizzaListaCaratteri(ris);
    return 0;
}

//
// TODO: SVILUPPARE QUI LE FUNZIONI RICHIESTE
//
ListaCaratteri lisFinale(ListaCaratteri lisChar,ListaStringhe lisStr)
{
    char i;
    for (i='a'; i<='z'; i++) {
        if(controlloPresenzaLettera(lisStr, i)>0)
            lisChar=InsInFondo(lisChar, i, controlloPresenzaLettera(lisStr,i));
    }
    return lisChar;
}
ListaCaratteri InsInFondo( ListaCaratteri lista,char elem,int num ) {
    ListaCaratteri punt;
    if( lista==NULL ) {
        punt = malloc( sizeof(ElemListaCaratteri) );
        punt->prox = NULL;
        punt->c = elem;
        punt->n=num;
        return punt;
    } else {
        lista->prox = InsInFondo( lista->prox, elem,num );
        return lista;
    }
}
int controlloPresenzaLettera(ListaStringhe lis,char lettera)
{
    int lunTmp;
    int quanteVolteLettera=0;
    if(lis==NULL)
        return 0;
    while (lis!=NULL) {
        lunTmp=strlen(lis->info);
        quanteVolteLettera+=QuanteVolteLetteraInUnaParola(lettera, lis->info, lunTmp);
        lis=lis->prox;
    }
    return quanteVolteLettera;
}
int QuanteVolteLetteraInUnaParola(char lettera,char parola[],int lungParola)
{
    int i,cont=0;
    for (i=0; i<lungParola; i++) {
        if(lettera==parola[i])
            cont++;
    }
    return cont;
}
ListaStringhe costruisci(){
    ListaStringhe lis=NULL;
    lis=InsInFondoStringa(lis,"casa");lis=InsInFondoStringa(lis,"sale");lis=InsInFondoStringa(lis,"postino");
    lis=InsInFondoStringa(lis,"mamma");lis=InsInFondoStringa(lis,"meta");lis=InsInFondoStringa(lis,"sasso");
    lis=InsInFondoStringa(lis,"osteria");lis=InsInFondoStringa(lis,"salvia");lis=InsInFondoStringa(lis,"notare");
    lis=InsInFondoStringa(lis,"zucchero");
    
    return lis;
}

ListaStringhe InsInFondoStringa(ListaStringhe lista,char elem[]) {
    ListaStringhe punt;
    if(lista==NULL) { punt = malloc( sizeof(ElemListaStringhe) );
                     punt->prox = NULL; strcpy(punt->info,elem); return  punt;
    }else{lista->prox = InsInFondoStringa(lista->prox,elem); return lista;}
}

void VisualizzaListaStringhe(ListaStringhe lista) {
    if (lista==NULL) printf(" ---| \n");
    else{printf(" %s ---> ", lista->info); VisualizzaListaStringhe( lista->prox );}
}

void VisualizzaListaCaratteri(ListaCaratteri lista) {
    if (lista==NULL) printf(" ---| \n");
    else{printf(" (%c,%d) ---> ", lista->c, lista->n); VisualizzaListaCaratteri( lista->prox );}
}
